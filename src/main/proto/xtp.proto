syntax = "proto3";

option java_multiple_files = true;
//option java_outer_classname = "BasicProto";

/*
    XTP(X Transfer Protocol)
    协议版本：0.14
    定义应用程序创建的服务端（或客户端）Socket为“端”，对应的客户端（或服务端）为“对端”，应用自己这“端”为“本端”，
    发送协议消息的“端”为“发送端”，接收协议消息的“端”为“接收端”，一个“端”或“对端”既可以是“发送端”也可以是“接收端”。

    定义能够接收多个消息并把这些消息转换为相同数量的消息的实体为“处理者”。
    “处理者”以发送一个类型为HandlerInfo的Frame.message(或Frame.yield)开始生命周期，
    以发送一个Frame.end结束生命周期。“处理者”A有一计算属性“可接收数”，
    初始值为“通道大小”（HandlerInfo.channel_size），A每收到一个消息时“可接收数”减1，
    若A产出的消息B是HandlerInfo时，当B对应的“处理者”的生命周期结束后，A的“可接收数”加1，
    若A产出的是其他类型的消息时，A的“可接收数”加1，A的“可接收数”必须时刻大于0。

    规定一个“端”创建时，能且仅能创建一个根“处理者”，通过发送一个消息类型为HandlerInfo的Frame.message来声明，
    且Frame.handler_id为0， HandlerInfo.handler_id为1。

    分帧：
    当使用提供分帧方案的底层传输协议时（例如：WebSocket），
    将数据帧(下文定义的Frame)序列化成二进制数据后直接放入传输协议的消息（二进制数据字段/Payload Data）中。
    当使用无分帧方案的底层传输协议时（例如：TCP），在发送数据帧前增加24位有符号位且大于0的数字，符号位为0表示正数，
    之后紧跟序列化为二进制数据的数据帧(下文定义的Frame)
     0                   1                   2
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |0|                Frame Length                 |
    +-----------------------------------------------+
    |                XTP Frame          ...
    |
    +-----------------------------------------------+

    心跳：
    当使用TCP传输时，连接的一端应该定期(默认为20s)发送24位全0数据（表示一次Ping），以通知对端自己还活着。
     0                   1                   2
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                   All 0                       |
    +-----------------------------------------------+
    其他传输协议使用自己的Ping/Pong方案。
 */
package xtp;

//数据帧，连接上的基础数据载体
message Frame {
    //处理者ID，表示此数据帧发送至或产出于哪个处理者。
    int32 handler_id = 1;
    oneof type {
        //消息，表示发送端（生产者）向处理者发送一个流消息
        Message message = 2;
        //关闭发送通道，表示发送端（生产者）无后续消息需要发送给处理者
        Close close = 3;
        //处理者产出的消息
        Message yield = 4;
        //处理者生命周期的结束
        End end = 5;
    }
}

message Message {
    //类型
    oneof type {
        bytes data = 1;
        HandlerInfo handler_info = 2;
    }
}

//处理者信息，声明本端创建了一个处理者，含有订阅语义，表示本端提供了一个转换函数，等待对端发送消息
message HandlerInfo {
    //处理者标识，必须大于0，本端每声明新的处理者时此值加1，可能与对端的创建的处理者标识相同，但它们分别表示的是处于两端的各自的不同的处理者
    int32 handler_id = 1;
    //通道大小，用于实现反压（Backpressure）机制
    int32 channel_size = 2;
    //任意二进制数据（可空）
    bytes data = 3;
}

//关闭发送通道
message Close {
    //错误（可空），空时表示因成功而关闭
    Error error = 1;
}

//结束，表示处理者生命周期的结束
message End {
    //错误（可空），空时表示因成功而结束
    Error error = 1;
}

//错误
message Error {
    //错误类名
    string type_name = 1;
    //错误消息（可空）
    string text_message = 2;
}